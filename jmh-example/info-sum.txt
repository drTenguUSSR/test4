@Fork(value = 2)
    каждый fork прогоняется на своем this
@Warmup(iterations = 2, time = 1000, timeUnit = TimeUnit.MILLISECONDS)
    вызов метода повторяется N-раз, пока суммарное время вызовов менее указанного time.
    такие N-раз вызовы повторяются iterations раз
    в конце итерации выводится среднее арифметическое по времени каждого суммируемого вызова
@Measurement(iterations = 2, batchSize = 3)
    в рамках каждой итерации выполняется N-раз по batchSize вызовов,
    пока общее время выполнения составляет менее time (10s по умолчанию)
    в конце итерации выводится среднее арифметическое по времени каждого суммируемого вызова
------------------------------------------------------------------------------------------------------------
параметры xstate (public static class XState):
    объект xstate создается:
    - может быть создан новый экземпляр в рамках каждого fork
    - может быть переиспользован при окончании fork одного метода-теста и начала другого fork для другого метода-теста
    @Setup(Level.Trial) - метод инициализации 1 раз вначале каждого fork
    @Setup(Level.Iteration) - метод инициализации вызывается вначале каждой итерации (и warmup и iteration)
    @Setup(Level.Invocation) - метод инициализации вызывается перед каждым вызовом метода в каждой итерации

@Param({ "100", "200" }) public int iterations;
    для каждого значения из массива iterations (тип элемента - int) выполняется полный набор тестов, от уровня fork
    в итоговой таблице отображаются отдельные значения для каждого варианта iterations.
    Пример: если формат вывода выводил 1 стоку для 1 метода, то после прогона с 2  значениеми в
    iterations отобразятся 2 строки.
------------------------------------------------------------------------------------------------------------
запуск тестов:
- фиксируется значание state параметра
- запуск 1го Fork
- запуск Warmup итерации
- конструктор тест-класс
- конструктор State-класса (@State(Scope.Benchmark))
- State-класс вызывается init (@Setup(Level.Trial)) с зафиксированным state параметром
! далее в WarmUp и Mesurement итераций конструкторы и init не вызываются
- запуск 2го Fork
- запуск Warmup итерации
- конструктор тест-класс
- конструктор State-класса (@State(Scope.Benchmark))
- State-класс вызывается init (@Setup(Level.Trial)) с зафиксированным state параметром
! далее в WarmUp и Mesurement итераций конструкторы и init не вызываются
------------------------------------------------------------------------------------------------------------
в финальном отчете:
	столбец Cnt = (Fork итераций) * (Measurementитераций)
	Score = 260,867 ms/op. "260" - число миллисекунд с дробной частью
	------------------------------------------------------------------------------------------------------------